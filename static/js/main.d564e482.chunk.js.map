{"version":3,"sources":["assets/images/preloader.gif","serviceWorker.js","api.ts","BLL/TodoListReducer.ts","DAL/api.ts","BLL/AuthReducer.ts","BLL/store.ts","UI/header/HeaderBlock.tsx","UI/common/formsComponets.tsx","UI/common/validators.ts","UI/auth/Login.tsx","UI/TodoList/AddNewItemForm.tsx","UI/TodoList/TodoListTask.tsx","UI/TodoList/TodoListTasks.tsx","UI/TodoList/TodoListFooter.tsx","UI/TodoList/TodoListTitle.tsx","UI/common/Preloader.tsx","UI/TodoList/TodoList.tsx","UI/App.tsx","UI/Initial.tsx","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","instance","axios","create","withCredentials","headers","API-KEY","baseURL","api","getTodolists","get","createTodolist","newTodolistName","post","title","deleteTodolist","todolistId","delete","concat","changeTodoTitle","newtitle","put","getTasks","createTask","newText","deleteTask","taskId","changeTask","task","newPropsObj","todoListId","id","Object","objectSpread2","ADD_TASK","initialState","todolists","isPreloaderTodo","isPreloaderTasks","changePreloaderTodoAC","isPreloader","type","changePreloaderTasksAC","API","then","res","data","formData","email","password","rememberMe","AUTH_FAIL","userId","login","isAuth","setAuthFail","Autorization","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","wrap","_context","prev","next","sent","resultCode","t0","alert","stop","_x","apply","this","arguments","rootReducer","combineReducers","auth","state","length","undefined","action","todoPage","newTodolists","toConsumableArray","arrTodoAfterDel","filter","todolist","map","todo","tasks","newTask","arrTasksAfterDel","taska","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","HeaderBlock","useSelector","User","useDispatch","react_default","createElement","style","boxSizing","padding","backgroundColor","height","borderTopLeftRadius","border","float","color","Fragment","marginRight","onClick","_ref3","_callee3","_context3","console","log","_x3","react_router_dom","to","FormControl","input","meta","props","child","objectWithoutProperties","hasError","touched","error","formElStyle","formWarningStyle","className","children","Input","restProps","formsComponets_FormControl","assign","requiredField","val","maxLength","max","value","maxLength25","test","ReduxLoginForm","reduxForm","onSubmit","handleSubmit","marginBottom","borderRadius","Field","placeholder","component","name","validate","htmlFor","Login","react_router","_ref2","_callee2","_context2","_x2","LogIn","AddNewItemForm","onAddItemClick","_this","setState","addItem","onTitleChanged","e","currentTarget","onKeyPress","key","render","classNameInput","onChange","React","Component","TodoListTask","editMode","memoryTitle","editPriorityMode","onIsDoneChanged","status","checked","changeStatus","onClickClose","activateEditMode","deActivateEditMode","changeTitle","onPriorityChanged","changePriority","priora","statusTasks","classForIsDone","priority","slice","onBlur","autoFocus","size","TodoListTasks","taskElements","TodoList_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","Preloader","src","preloader","alt","TodoList","restoreState","changeTodolist","addTask","newfilterValue","newPriorityValue","_this$props$tasks","TodoList_TodoListTitle","TodoList_AddNewItemForm","common_Preloader","TodoList_TodoListTasks","t","TodoList_TodoListFooter","TodolistConnect","connect","response","todoId","changeTodoListSuccess","setTasksSuccess","items","item","addTaskSuccess","deleteTaskSuccess","App","componentDidMount","addTodoList","tl","UI_TodoList_TodoList","ConnectedApp","Initial","backgroundImage","HeaderBlock_HeaderBlock","minHeight","path","src_UI_App","ConnectedInitial","ReactDOM","es","UI_Initial","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d564e482.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader.ee01809c.gif\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\r\nimport {TaskType, TodoType, UpadateTaskType} from \"./types/entities\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"99d1b1eb-87ca-41b0-b4eb-5da7df0ab7de\"},\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/todo-lists/`\r\n})\r\n\r\n\r\n// type CreateTodoType = {\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     data: {\r\n//         item: TodoType\r\n//     }\r\n// }\r\n// type UpdateTaskType = {\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     data: {\r\n//         item: TaskType\r\n//     }\r\n// }\r\n//\r\n// type DeleteTodoType={\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     data: {}\r\n// }\r\n\r\n///описываем, что нам возвращает сервер из апишки в промисе\r\ntype CommonApiType<T> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\ntype GetTaskType={\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nconst api = {\r\n\r\n    getTodolists() {\r\n        return instance.get<Array<TodoType>>(\r\n            '')\r\n    },\r\n    createTodolist(newTodolistName: string) {\r\n        return instance.post<CommonApiType<{ item: TodoType }>>(\r\n            '',\r\n            {title: newTodolistName}\r\n        )\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonApiType<{}>>(\r\n            `${todolistId}`\r\n        )\r\n    },\r\n    changeTodoTitle(todolistId: string, newtitle: string) {\r\n        return instance.put<CommonApiType<{ item: TodoType }>>(\r\n            `${todolistId}`,\r\n            {title: newtitle}\r\n        )\r\n    },\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTaskType>(\r\n            `${todolistId}/tasks`,\r\n        )\r\n    },\r\n    createTask(todolistId: string, newText: string) {\r\n        return instance.post<CommonApiType<{ item: TaskType }>>(`${todolistId}/tasks`,\r\n            {title: newText}\r\n        )\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonApiType<{}>>(`${todolistId}/tasks/${taskId}`\r\n        )\r\n    },\r\n    changeTask(task: TaskType, newPropsObj: UpadateTaskType) {\r\n        return instance.put<CommonApiType<{ item: TaskType }>>(\r\n            `${task.todoListId}/tasks/${task.id}`,\r\n            {...task, ...newPropsObj}\r\n        )\r\n    }\r\n}\r\n\r\nexport default api;","import api from \"../api\";\r\nimport {TaskType, TodoType, UpadateTaskType} from \"../types/entities\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const ADD_TODOLIST = \"TodoList/Reducer/ADD_TODOLIST\"\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD_TASK\"\r\nexport const CHANGE_TASK = \"TodoList/Reducer/CHANGE_TASK\"\r\nexport const SET_TODOLISTS = 'SET_TODOLISTS'\r\nexport const SET_TASKS = 'SET_TASKS'\r\nexport const CHANGE_TODOLIST = 'TodoList/Reducer/CHANGE_TODOLIST'\r\nexport const CHANGE_PRELOADER_TODO = 'TodoList/Reducer/CHANGE_PRELOADER_TODO'\r\nexport const CHANGE_PRELOADER_TASKS = 'TodoList/Reducer/CHANGE_PRELOADER_TASKS'\r\n\r\n\r\ntype InitialStateType = {\r\n    todolists: Array<TodoType>\r\n    isPreloaderTodo: boolean\r\n    isPreloaderTasks: boolean\r\n}\r\n\r\n////второй способ закоменчен\r\n// type InitialStateType= typeof initialState\r\n\r\nconst initialState: InitialStateType = {\r\n    todolists: [\r\n        // {\r\n        //     addedDate: \"2020\",\r\n        //     id: \"e75b1dca-1c11-4eb2-bca2-10cd270017a2\",\r\n        //     order: -4,\r\n        //     title: \"ewww\",\r\n        //     // tasks: [{\r\n        //     //     addedDate: \"2020-05-14T19:55:29.983\",\r\n        //     //     deadline: null,\r\n        //     //     description: null,\r\n        //     //     id: \"323d4c4b-873c-41bb-ab11-f9de8839454e\",\r\n        //     //     order: -2,\r\n        //     //     priority: 2,\r\n        //     //     startDate: null,\r\n        //     //     status: 0,\r\n        //     //     title: \"dsdasdsa\",\r\n        //     //     todoListId: \"b0e29d92-5cd1-4309-b781-12e4b257a44f\"\r\n        //     // }]\r\n        // }\r\n\r\n    ],\r\n    isPreloaderTodo: false,\r\n    isPreloaderTasks: false\r\n\r\n}\r\n\r\n\r\nexport const TodoListReducer = (state: InitialStateType = initialState, action: TodoActionTypes): InitialStateType => {\r\n\r\n    let newTodolists;\r\n    switch (action.type) {\r\n\r\n        case SET_TODOLISTS:\r\n            return {...state, todolists: action.todolists}\r\n\r\n        case ADD_TODOLIST:\r\n            newTodolists = [action.newTodolistName, ...state.todolists]\r\n            return {...state, todolists: newTodolists}\r\n\r\n        case DELETE_TODOLIST:\r\n            let arrTodoAfterDel = state.todolists.filter(todolist => todolist.id !== action.todolistId)\r\n            arrTodoAfterDel = arrTodoAfterDel.map((todolist) => {\r\n                return {...todolist}\r\n            })\r\n            return {...state, todolists: arrTodoAfterDel}\r\n\r\n        case CHANGE_TODOLIST:\r\n            newTodolists = state.todolists.map(todo => {\r\n                if (todo.id !== action.todolistId) {\r\n                    return todo\r\n                } else {\r\n                    return {...todo, title: action.title}\r\n                }\r\n            })\r\n            return {...state, todolists: newTodolists}\r\n\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todoListId) {\r\n                        return todo\r\n                    } else {\r\n                        return {...todo, tasks: action.tasks}\r\n                    }\r\n                })\r\n            }\r\n\r\n        case ADD_TASK:\r\n            newTodolists = state.todolists.map(todo => {\r\n                if (todo.id !== action.todolistId) {\r\n                    return todo\r\n                } else {\r\n                    return {...todo, tasks: [action.newTask, ...todo.tasks]}\r\n                }\r\n            })\r\n            return {...state, todolists: newTodolists}\r\n\r\n        case DELETE_TASK:\r\n            newTodolists = state.todolists.map(todo => {\r\n                if (todo.id !== action.todolistId) {\r\n                    return todo\r\n                } else {\r\n                    let arrTasksAfterDel = [...todo.tasks.filter(taska => taska.id !== action.taskId\r\n                    )];\r\n                    return {\r\n                        ...todo, tasks: arrTasksAfterDel\r\n                    }\r\n                }\r\n            })\r\n            return {...state, todolists: newTodolists}\r\n\r\n        case CHANGE_TASK:\r\n            newTodolists = state.todolists.map(todo => {\r\n                if (todo.id !== action.task.todoListId) {\r\n                    return todo\r\n                } else {\r\n\r\n                    return {\r\n                        ...todo,\r\n                        tasks: todo.tasks.map(taska => {\r\n                            if (taska.id !== action.task.id) {\r\n                                return taska\r\n                            } else {\r\n                                return {...action.task}\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n            return {...state, todolists: newTodolists}\r\n\r\n\r\n        case CHANGE_PRELOADER_TODO:\r\n            return {...state, isPreloaderTodo: action.isPreloader}\r\n\r\n        case CHANGE_PRELOADER_TASKS:\r\n            return {...state, isPreloaderTasks: action.isPreloader}\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\ntype TodoActionTypes =\r\n    SetTodoListsSuccessType\r\n    | AddTodolistSuccessType\r\n    | DeleteTodoListSuccess\r\n    | СhangeTodoListSuccess\r\n    |\r\n    SetTasksSuccessType\r\n    | AddTaskSuccessType\r\n    | DeleteTaskSuccessType\r\n    | ChangeTaskSuccessType\r\n    |\r\n    ChangePreloaderTodoACType\r\n    | ChangePreloaderTasksACType\r\n\r\n/////ТИПЫ ДЛЯ ACTION CREATORS\r\ntype SetTodoListsSuccessType = {\r\n    type: typeof SET_TODOLISTS\r\n    todolists: Array<TodoType>\r\n}\r\ntype AddTodolistSuccessType = {\r\n    type: typeof ADD_TODOLIST\r\n    newTodolistName: TodoType\r\n}\r\ntype DeleteTodoListSuccess = {\r\n    type: typeof DELETE_TODOLIST\r\n    todolistId: string\r\n}\r\ntype СhangeTodoListSuccess = {\r\n    type: typeof CHANGE_TODOLIST\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\ntype SetTasksSuccessType = {\r\n    type: typeof SET_TASKS\r\n    tasks: Array<TaskType>\r\n    todoListId: string\r\n}\r\ntype AddTaskSuccessType = {\r\n    type: typeof ADD_TASK\r\n    todolistId: string\r\n    newTask: TaskType\r\n}\r\ntype DeleteTaskSuccessType = {\r\n    type: typeof DELETE_TASK\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype ChangeTaskSuccessType = {\r\n    type: typeof CHANGE_TASK\r\n    task: TaskType\r\n}\r\n\r\ntype ChangePreloaderTodoACType = {\r\n    type: typeof CHANGE_PRELOADER_TODO\r\n    isPreloader: boolean\r\n}\r\ntype ChangePreloaderTasksACType = {\r\n    type: typeof CHANGE_PRELOADER_TASKS\r\n    isPreloader: boolean\r\n}\r\n\r\n///// ACTION CREATORS\r\nexport const setTodoListsSuccess = (todolists: Array<TodoType>): SetTodoListsSuccessType => ({\r\n    type: SET_TODOLISTS,\r\n    todolists\r\n})\r\nexport const addTodoListSuccess = (newTodolistName: TodoType): AddTodolistSuccessType => ({\r\n    type: ADD_TODOLIST,\r\n    newTodolistName: newTodolistName\r\n})\r\nexport const deleteTodoListSuccess = (todolistId: string): DeleteTodoListSuccess => ({\r\n    type: DELETE_TODOLIST,\r\n    todolistId: todolistId\r\n})\r\nexport const changeTodoListSuccess = (todoId: string, newtitle: string): СhangeTodoListSuccess => ({\r\n    type: CHANGE_TODOLIST,\r\n    todolistId: todoId,\r\n    title: newtitle\r\n})\r\n\r\n\r\nexport const setTasksSuccess = (tasks: Array<TaskType>, todoListId: string): SetTasksSuccessType => ({\r\n    type: SET_TASKS,\r\n    tasks,\r\n    todoListId\r\n})\r\nexport const addTaskSuccess = (todolistId: string, newTask: TaskType): AddTaskSuccessType => ({\r\n    type: ADD_TASK,\r\n    todolistId: todolistId,\r\n    newTask: newTask\r\n})\r\nexport const deleteTaskSuccess = (todolistId: string, taskId: string): DeleteTaskSuccessType => ({\r\n    type: DELETE_TASK,\r\n    todolistId: todolistId,\r\n    taskId: taskId\r\n})\r\nexport const changeTaskSuccess = (task: TaskType): ChangeTaskSuccessType => ({type: CHANGE_TASK, task: task})\r\n\r\n\r\nexport const changePreloaderTodoAC = (isPreloader: boolean): ChangePreloaderTodoACType => ({\r\n    type: CHANGE_PRELOADER_TODO,\r\n    isPreloader\r\n})\r\nexport const changePreloaderTasksAC = (isPreloader: boolean): ChangePreloaderTasksACType => ({\r\n    type: CHANGE_PRELOADER_TASKS,\r\n    isPreloader\r\n})\r\n\r\n\r\n/////THUNKS\r\n////from APP\r\nexport const getTodolists = () => {\r\n    return (dispatch: Dispatch<TodoActionTypes>) => {\r\n        dispatch(changePreloaderTodoAC(true))\r\n        // debugger\r\n        api.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodoListsSuccess(res.data))\r\n                dispatch(changePreloaderTodoAC(false))\r\n                // console.log(res.data);\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport const addTodoList = (newTodolistName: string) => {\r\n    return (dispatch: Dispatch<TodoActionTypes>) => {\r\n        api.createTodolist(newTodolistName)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(addTodoListSuccess(response.data.data.item))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n////from TodoList\r\nexport const deleteTodolist = (todoListId: string) => {\r\n    return (dispatch: Dispatch<TodoActionTypes>) => {\r\n        api.deleteTodolist(todoListId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    // debugger\r\n                    dispatch(deleteTodoListSuccess(todoListId))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTodolist = (todoListId: string, newtitle: string) => {\r\n    return (dispatch: Dispatch<TodoActionTypes>) => {\r\n        api.changeTodoTitle(todoListId, newtitle)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(changeTodoListSuccess(todoListId, newtitle))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const getTasks = (todoListId: string) => {\r\n    return (dispatch: Dispatch<TodoActionTypes>) => {\r\n        dispatch(changePreloaderTasksAC(true))\r\n        api.getTasks(todoListId)\r\n            .then(response => {\r\n                console.log(response)\r\n                if (!response.data.error) {\r\n                    dispatch(setTasksSuccess(response.data.items, todoListId))\r\n                    dispatch(changePreloaderTasksAC(false))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const addTask = (todoListId:string, newText:string) => {\r\n    return (dispatch: Dispatch<TodoActionTypes>) => {\r\n        api.createTask(todoListId, newText)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    let newTask = response.data.data.item;\r\n                    dispatch(addTaskSuccess(todoListId, newTask))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const deleteTask = (todoListId:string, taskId:string) => {\r\n    return (dispatch: Dispatch<TodoActionTypes>) => {\r\n        api.deleteTask(todoListId, taskId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(deleteTaskSuccess(todoListId, taskId))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const changeTask = (task: TaskType, newPropsObj: UpadateTaskType) => {\r\n    return (dispatch: Dispatch<TodoActionTypes>) => {\r\n        api.changeTask(task, newPropsObj)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(changeTaskSuccess(response.data.data.item))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n// export const setStateFromLocalStorageAC=()=>{\r\n//     localStorage\r\n//     let dd=localStorage.getItem('dasdas')\r\n//     let stateFromLS=JSON.parse(dd)\r\n//     return (\r\n//         {type: \"SET-STATE-FROM-LOCAL-STORAGE\",\r\n//         stateFromLS:stateFromLS}\r\n//     )\r\n// }","import axios from 'axios'\r\nimport {FormDataType} from \"../UI/auth/Login\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"99d1b1eb-87ca-41b0-b4eb-5da7df0ab7de\"},\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\"\r\n})\r\n\r\n\r\nexport const API = {\r\n    checkAuth() {\r\n        return instance.get(`auth/me`).then(res => res.data)\r\n    },\r\n    setAuth(formData:FormDataType) {\r\n        debugger\r\n        return instance.post(`auth/login`,\r\n            {email:formData.email, password:formData.password, rememberMe:formData.rememberMe }\r\n        ).then(res => res.data)\r\n    },\r\n    delAuth() {\r\n        return instance.delete(`auth/login`).then(res => res.data)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {API} from \"../DAL/api\";\r\nimport {FormDataType} from \"../UI/auth/Login\";\r\n\r\nconst AUTH_SUCCESS = \"TODOLIST_TS/AuthReducer/AUTH_SUCCESS\"\r\nconst AUTH_FAIL = \"TODOLIST_TS/AuthReducer/AUTH_FAIL\"\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: true\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const AuthReducer = (state: InitialStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case AUTH_SUCCESS:\r\n            return {...state, email: action.email, login: action.login, userId: action.userId, isAuth: true}\r\n        case AUTH_FAIL:\r\n            return {...state, email: null, login: null, userId: null, isAuth: false}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\ntype ActionType = any | SetAuthSuccessType | SetAuthFailType\r\n\r\ntype SetAuthSuccessType = {\r\n    type: typeof AUTH_SUCCESS\r\n    email: string\r\n    login: string\r\n    userId: number\r\n}\r\n\r\ntype SetAuthFailType = { type: typeof AUTH_FAIL };\r\n\r\ntype DataType = {\r\n    email: string\r\n    login: string\r\n    userId: number\r\n}\r\n////AC\r\nconst setAuthSuccess = (data: DataType): SetAuthSuccessType => ({\r\n    type: AUTH_SUCCESS,\r\n    email: data.email,\r\n    login: data.login,\r\n    userId: data.userId,\r\n})\r\n\r\nconst setAuthFail = (): SetAuthFailType => ({type: AUTH_FAIL})\r\n\r\n\r\nexport const Autorization = () => {\r\n    return async (dispatch: Dispatch<ActionType>) => {\r\n        try {\r\n            let res = await API.checkAuth()\r\n            if (res.resultCode === 0) {\r\n                dispatch(setAuthSuccess(res.data))\r\n            } else {\r\n                dispatch(setAuthFail())\r\n            }\r\n        } catch (e) {\r\n            alert(e)\r\n        }\r\n        // dispatch(setAuthSuccess({email: \"fdsfsdfsd\", login: \"fdsfs\", userId: 21312}))\r\n    }\r\n}\r\n\r\nexport const LogIn = (formData: FormDataType) => {\r\n    return async (dispatch: Dispatch<ActionType>) => {\r\n        try {\r\n            let res = await API.setAuth(formData)\r\n            if (res.resultCode === 0) dispatch(Autorization())\r\n        } catch (e) {\r\n            alert(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const LogOut = () => {\r\n\r\n    return async (dispatch: Dispatch<ActionType>) => {\r\n        try {\r\n            let res = await API.delAuth()\r\n            console.log(res)\r\n            if (res.resultCode === 0) dispatch(setAuthFail())\r\n        } catch (e) {\r\n            alert(e)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {TodoListReducer} from \"./TodoListReducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { AuthReducer } from \"./AuthReducer\";\r\nimport {reducer as formReducer} from \"redux-form\"\r\n\r\nlet rootReducer=combineReducers({\r\n    auth: AuthReducer,\r\n    todoPage:TodoListReducer,\r\n    form:formReducer\r\n})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n///// typeof rootReducer-это тип нашей функции редьюсер, которая возвращает наш стейт\r\ntype RootRecuderType= typeof rootReducer\r\n\r\n///// ReturnType<RootRecuderType>- это ка раз тот тип который нам вернула функция редьюсер- то есть стейт\r\nexport type AppStateType=ReturnType<RootRecuderType>\r\n\r\nexport default store;","import React, {CSSProperties} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../BLL/store\";\r\nimport {LogOut} from \"../../BLL/AuthReducer\";\r\n\r\nexport const HeaderBlock = () => {\r\n\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n    const User = useSelector<AppStateType, string>(state => state.auth.login)\r\n    const dispatch = useDispatch();\r\n\r\n    const divStyle: CSSProperties = {\r\n        boxSizing: \"border-box\",\r\n        padding: \"10px\",\r\n        backgroundColor: \"rgba(29, 32, 38, 0.87)\",\r\n        height: \"80px\",\r\n        borderTopLeftRadius: \"15px\",\r\n        border: \"1px solid black\"\r\n    };\r\n\r\n    let onLogOutClick = () => {\r\n        debugger\r\n        dispatch(LogOut())\r\n\r\n    }\r\n\r\n    return (\r\n        <div style={divStyle}>\r\n            <div style={{float: \"right\", padding: \"15px\", color: \"white\"}}>\r\n                {\r\n                    isAuth ?\r\n                        <>\r\n                            <span style={{marginRight:\"10px\"}}>{User}</span>\r\n                            <button onClick={onLogOutClick}>LOGOUT</button>\r\n                        </>\r\n                        :\r\n                        <NavLink to={\"/login\"}>LOGIN</NavLink>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\n\r\n\r\nconst FormControl = ({input, meta, child, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    let formElStyle = hasError ? \"wrapInp error\" : \"wrapInp\"\r\n    let formWarningStyle = {color: hasError ? \"red\" : \"black\"}\r\n    return (\r\n        <div className={ `${formElStyle}`}>\r\n            {props.children}\r\n            {hasError && <div style={formWarningStyle}>{meta.error}</div>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport let Input = (props: any) => {\r\n\r\n    let {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input}{...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n","export const requiredField = (val: any) => {\r\n    return val\r\n        ? undefined\r\n        : \"line is required\"\r\n}\r\n\r\nconst maxLength = (max: any) => {\r\n    return (value: any) => value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n}\r\n\r\nexport const maxLength10 = maxLength(10)\r\nexport const maxLength25 = maxLength(25)\r\n\r\nexport const email = (value: any) =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n        ? 'Invalid email address'\r\n        : undefined","import React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../BLL/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/formsComponets\";\r\nimport {email, maxLength25, maxLength10, requiredField} from \"../common/validators\";\r\nimport {LogIn} from \"../../BLL/AuthReducer\";\r\n\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\n//1\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div style={{\r\n                boxSizing: \"border-box\", padding: \"15px\", color: \"white\", backgroundColor: \"#333\", marginBottom:\"15px\", borderRadius:\"5px\"\r\n            }}>\r\n                <div><i>данные тестового аккаунта:</i></div>\r\n                <div>Email: <ins>free@samuraijs.com</ins></div>\r\n                <div>Password: <ins>free</ins></div>\r\n            </div>\r\n            <div>\r\n                <Field type=\"text\"\r\n                       placeholder={\"email\"}\r\n                       component={Input}\r\n                       name={\"email\"}\r\n                       validate={[requiredField, email, maxLength25]}\r\n                />\r\n\r\n            </div>\r\n            <div>\r\n                <Field type=\"text\"\r\n                       placeholder={\"password\"}\r\n                       component={Input}\r\n                       name={\"password\"}\r\n                       validate={[requiredField]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field type=\"checkbox\"\r\n                       id=\"styled-checkbox-1\"\r\n                       component={'input'}\r\n                       name={\"checkbox\"}/>\r\n                <label htmlFor=\"styled-checkbox-1\">remember me</label>\r\n            </div>\r\n            <button className={\"butt\"}>Login</button>\r\n        </form>\r\n    )\r\n}\r\n//2\r\nconst ReduxLoginForm = reduxForm<FormDataType>({form: \"login\"})(LoginForm)\r\n\r\n//3\r\nexport const Login: React.FC = () => {\r\n\r\n    let dispatch = useDispatch();\r\n    let isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth);\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        // debugger\r\n        console.log(\"hey\")\r\n        dispatch(LogIn(formData));\r\n    }\r\n\r\n    if (isAuth) return <Redirect to={\"/\"}/>\r\n    return (\r\n        <ReduxLoginForm onSubmit={onSubmit}/>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\n\r\n\r\ntype StateType = {\r\n    error: boolean\r\n    title: string\r\n}\r\n\r\ntype OwnPropsType={\r\n    addItem: (title: string)=>void\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<OwnPropsType, StateType> {\r\n\r\n    state: StateType = {\r\n        error: true,\r\n        title: \"\"\r\n    }\r\n\r\n    onAddItemClick = () => {\r\n\r\n        let newText = this.state.title;\r\n        this.setState({title: \"\"})\r\n\r\n        if (newText === \"\") {\r\n            this.setState({error: true})\r\n        } else {\r\n            this.setState({error: false})\r\n            this.props.addItem(newText); //вызвали ту ф-ю в родит. компоненте и подали в нее записаное в переменную newText значение инпута!\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onTitleChanged = (e:ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            error: false,\r\n            title: e.currentTarget.value\r\n        })\r\n    };\r\n\r\n    onKeyPress = (e:KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            this.onAddItemClick()\r\n        }\r\n    };\r\n\r\n\r\n    render = () => {\r\n        let classNameInput = this.state.error ? \"error\" : \"\";\r\n        return (\r\n            <div className=\"todoList-newTaskForm\">\r\n                <input\r\n                    type=\"text\"\r\n                    className={classNameInput}\r\n                    onChange={this.onTitleChanged}\r\n                    value={this.state.title}\r\n                    onKeyPress={this.onKeyPress}\r\n                    placeholder=\"New item name\"/>\r\n\r\n                {/*по клику на кнопку произойдет вызов ф-ии onAddItemClick*/}\r\n                <button onClick={this.onAddItemClick}>Add</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;\r\n\r\n","import React, {ChangeEvent} from \"react\"\r\nimport {TaskType} from \"../../types/entities\";\r\n\r\ntype OwnPropsType = {\r\n    deleteTask: (taskId: string) => void\r\n    changeTitle: (task: TaskType, memoryTitle:string) => void\r\n    changeStatus: (task: TaskType, status: number) => void\r\n    changePriority: (task: TaskType, value:string) => void\r\n    task: TaskType\r\n}\r\n\r\n\r\nclass TodoListTask extends React.Component <OwnPropsType> {\r\n\r\n\r\n    state = {\r\n        editMode: false,\r\n        memoryTitle: '',\r\n        editPriorityMode: false\r\n    }\r\n\r\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? 2 : 0\r\n        this.props.changeStatus(this.props.task, status)\r\n    }\r\n\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            memoryTitle: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    onClickClose = () => {\r\n        this.props.deleteTask(this.props.task.id)\r\n    }\r\n\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true,\r\n            memoryTitle: this.props.task.title\r\n        })\r\n    }\r\n    deActivateEditMode = () => {\r\n        this.props.changeTitle(this.props.task, this.state.memoryTitle)\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    }\r\n    onPriorityChanged = (e:ChangeEvent<HTMLSelectElement>) => {\r\n        let value = e.currentTarget.value;\r\n        debugger\r\n        this.props.changePriority(this.props.task, value)\r\n    }\r\n\r\n\r\n    render = () => {\r\n        let statusTasks = this.props.task.status\r\n        let classForIsDone = statusTasks === 2 ? \"done\" : \"todoList-task\";\r\n        let priora;\r\n        switch (this.props.task.priority) {\r\n            case 0:\r\n                priora = 'low'\r\n                break\r\n            case 1:\r\n                priora = 'middle'\r\n                break\r\n            case 2:\r\n                priora = 'hi'\r\n                break\r\n            case 3:\r\n                priora = 'urgently'\r\n                break\r\n            case 4:\r\n                priora = 'later'\r\n                break\r\n            default:\r\n                priora = 'smth strange'\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"taskContainer\">\r\n                    <div className={classForIsDone}>\r\n                        <span>{this.props.task.id.slice(0, 4)}</span>\r\n                        <input type=\"checkbox\" onChange={this.onIsDoneChanged} checked={statusTasks === 2}/>\r\n\r\n                        {/*<div>{this.props.task.id}</div>*/}\r\n                        {\r\n                            this.state.editMode\r\n                                ? <input onBlur={this.deActivateEditMode}\r\n                                         onChange={this.onTitleChanged}\r\n                                         value={this.state.memoryTitle}\r\n                                         autoFocus={true}/>\r\n                                : <span onClick={this.activateEditMode}>-{this.props.task.title}, </span>\r\n                        }\r\n\r\n                        <span>priority:\r\n                            {\r\n                                this.state.editPriorityMode\r\n                                    ? <select autoFocus={true}\r\n                                              value={this.props.task.priority}\r\n                                              size={1}\r\n                                              onBlur={() => this.setState({editPriorityMode: false})}\r\n                                              onChange={this.onPriorityChanged}>\r\n                                        <option value={0}>low</option>\r\n                                        <option value={1}>middle</option>\r\n                                        <option value={2}>hi</option>\r\n                                        <option value={3}>urgently</option>\r\n                                        <option value={4}>later</option>\r\n                                    </select>\r\n\r\n                                    : <span onClick={() => this.setState({editPriorityMode: true})}>\r\n                                        {priora}\r\n                                    </span>\r\n                            }\r\n                        </span>\r\n                    </div>\r\n                    <button className=\"deleterTask\" onClick={this.onClickClose}>x</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;\r\n\r\n","import React from \"react\";\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport {TaskType} from \"../../types/entities\";\r\n\r\n\r\ntype OwnPropsType={\r\n    deleteTask: (taskId: string) => void\r\n    changeTitle: (task: TaskType, memoryTitle:string) => void\r\n    changeStatus: (task: TaskType, status: number) => void\r\n    changePriority: (task: TaskType, value:string) => void\r\n    tasks: Array<TaskType>\r\n}\r\n\r\n\r\nclass TodoListTasks extends React.Component <OwnPropsType>{\r\n\r\n    render = () => {\r\n\r\n        let taskElements = this.props.tasks.map(task => {\r\n            return <TodoListTask\r\n                key={task.id}\r\n                deleteTask={this.props.deleteTask}\r\n                changeTitle={this.props.changeTitle}\r\n                changeStatus={this.props.changeStatus}\r\n                changePriority={this.props.changePriority}\r\n\r\n                task={task}/>\r\n        })\r\n        return (\r\n            <div className=\"todoList-tasks\">\r\n                {taskElements}\r\n                {/*<TodoListTask title={this.props.tasks[0].title} isDone={this.props.tasks[0].isDone}/>*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;\r\n","import React from \"react\";\r\n\r\ntype OwnPropsType={\r\n    changeFilter:(filter:string)=>void\r\n    filterValue:string\r\n}\r\n\r\n\r\nclass TodoListFooter extends React.Component <OwnPropsType> {\r\n    state={\r\n        isHidden: false\r\n    }\r\n\r\n    onAllFilterClick = () => {this.props.changeFilter(\"All\")}\r\n    onCompletedFilterClick = () => {this.props.changeFilter(\"Completed\")}\r\n    onActiveFilterClick = () => {this.props.changeFilter(\"Active\")}\r\n    onShowFiltersClick = () => {this.setState({isHidden: false})}\r\n    onHideFiltersClick = () => {this.setState({isHidden: true})}\r\n\r\n    render = () => {\r\n\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n\r\n        return (\r\n            <div className=\"\">\r\n                <div className=\"todoList-footer\">\r\n                    {!this.state.isHidden && <span onClick={this.onHideFiltersClick}>hide</span>}\r\n                    {this.state.isHidden && <span onClick={this.onShowFiltersClick}>show</span>}\r\n                    {!this.state.isHidden && <div>\r\n                        <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\r\n                        <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\r\n                        <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;\r\n","import React, {ChangeEvent} from \"react\";\r\n\r\ntype OwnPropsType={\r\n    title:string\r\n    id:string\r\n    changeTodoTitle:(id:string, memoryTitle:string)=>void\r\n}\r\n\r\nclass TodoListTitle extends React.Component <OwnPropsType>{\r\n\r\n    state = {\r\n        editMode: false,\r\n        memoryTitle: '',\r\n        editPriorityMode: false\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true,\r\n            memoryTitle: this.props.title\r\n        })\r\n    }\r\n\r\n    deActivateEditMode = () => {\r\n        // debugger\r\n        this.props.changeTodoTitle(this.props.id, this.state.memoryTitle)\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    }\r\n    onTitleChanged = (e:ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            memoryTitle: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n\r\n                {\r\n                    this.state.editMode\r\n                        ? <input onBlur={this.deActivateEditMode}\r\n                                 onChange={this.onTitleChanged}\r\n                                 value={this.state.memoryTitle}\r\n                                 autoFocus={true}/>\r\n                        : <h3 onClick={this.activateEditMode} className=\"todoList-header__title\">{this.props.title}</h3>\r\n                }\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTitle;\r\n","import React from \"react\";\r\nimport preloader from '../../assets/images/preloader.gif'\r\n\r\n\r\ntype OwnPropsType={\r\n    isPreloader: boolean\r\n}\r\n\r\nconst Preloader = (props:OwnPropsType) => {\r\n    return (\r\n        <>\r\n            {props.isPreloader && <div>\r\n            <img src={preloader} alt=\"\"/>\r\n        </div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport '../App.css';\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport TodoListTitle from \"./TodoListTitle\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {\r\n     changeTodolist, deleteTodolist,\r\n    getTasks, addTask, deleteTask, changeTask} from \"../../BLL/TodoListReducer\";\r\nimport Preloader from \"../common/Preloader\";\r\nimport {TaskType, UpadateTaskType} from \"../../types/entities\";\r\nimport {AppStateType} from \"../../BLL/store\";\r\n\r\n\r\ntype OwnPropsType={\r\n    tasks: Array<TaskType>\r\n    isPreloaderTasks:boolean\r\n    id: string\r\n    title: string\r\n}\r\n\r\n\r\ntype MapStateToPropsType={\r\n    ///перечисляем то чем будем пользоваться в компоненте из пропсов\r\n    isPreloaderTasks:boolean\r\n}\r\n\r\ntype MapDispatchToPropsType={\r\n    deleteTodolist:(id:string)=>void\r\n    changeTodolist:(todoListId:string, newtitle:string)=>void\r\n    getTasks:(id:string)=>void\r\n    addTask:(id:string, newText:string)=>void\r\n    deleteTask:(id:string,taskId:string)=>void\r\n    changeTask:(task:TaskType, newPropsObj:UpadateTaskType)=>void\r\n}\r\n\r\n\r\nclass TodoList extends React.Component <OwnPropsType&MapDispatchToPropsType&MapStateToPropsType>{\r\n\r\n    componentDidMount() {\r\n        this.restoreState()\r\n    }\r\n\r\n    restoreState = () => {\r\n        // вызов колбека который нам предоставил connect для вызова санки\r\n        this.props.getTasks(this.props.id)\r\n    }\r\n\r\n\r\n    state = {\r\n        tasks: [\r\n            // {id: 1, title: \"JS\", isDone: true, priority: 'low'},\r\n\r\n        ], filterValue: \"All\"\r\n    }\r\n\r\n\r\n    deleteTodolist = () => {\r\n        // вызов колбека который нам предоставил connect для вызова санки\r\n        this.props.deleteTodolist(this.props.id)\r\n\r\n    }\r\n\r\n    changeTodoTitle = (todoListId:string, newtitle:string) => {\r\n        // вызов колбека который нам предоставил connect для вызова санки\r\n        this.props.changeTodolist(todoListId, newtitle)\r\n    }\r\n\r\n    addTask = (newText:string) => {\r\n        // вызов колбека который нам предоставил connect для вызова санки\r\n        this.props.addTask(this.props.id, newText)\r\n    }\r\n\r\n    deleteTask = (taskId:string) => {\r\n\r\n        this.props.deleteTask(this.props.id, taskId)\r\n    }\r\n\r\n\r\n    changeFilter = (newfilterValue:string) => {\r\n        this.setState({filterValue: newfilterValue});\r\n    }\r\n\r\n\r\n\r\n    changeTask = (task:TaskType, newPropsObj:UpadateTaskType) => {\r\n\r\n        // вызов колбека который нам предоставил connect для вызова санки\r\n        this.props.changeTask(task, newPropsObj)\r\n    }\r\n\r\n    changeStatus = (task:TaskType, status:number) => {\r\n        this.changeTask(task, {status: status})\r\n    }\r\n\r\n    changeTitle = (task:TaskType, newtitle:string) => {\r\n        this.changeTask(task, {title: newtitle})\r\n    }\r\n\r\n    changePriority = (task:TaskType, newPriorityValue:string) => {\r\n        this.changeTask(task, {priority: newPriorityValue})\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render = () => {\r\n\r\n        let {tasks= []} = this.props\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"todoList\">\r\n                    <div className=\"todoList-header\">\r\n                        <TodoListTitle title={this.props.title}\r\n                                       id={this.props.id}\r\n                                       changeTodoTitle={this.changeTodoTitle}/>\r\n                        <div>\r\n                            <span className=\"idTodo\">{`# ${this.props.id.slice(0, 4)}`}</span>\r\n                            <button className=\"deleterTodo\" onClick={this.deleteTodolist}>x</button>\r\n                        </div>\r\n                        <AddNewItemForm addItem={this.addTask}/>\r\n                    </div>\r\n                    <Preloader isPreloader={this.props.isPreloaderTasks}/>\r\n                    <TodoListTasks\r\n                        deleteTask={this.deleteTask}\r\n                        changeTitle={this.changeTitle}\r\n                        changeStatus={this.changeStatus}\r\n                        changePriority={this.changePriority}\r\n\r\n                        tasks={tasks.filter(t => {\r\n                            switch (this.state.filterValue) {\r\n                                case \"All\":\r\n                                    return true;\r\n                                case \"Completed\":\r\n                                    return t.status === 2;\r\n                                case \"Active\":\r\n                                    return t.status === 0;\r\n                                default:\r\n                                    return true;\r\n                            }\r\n                        })}\r\n                    />\r\n                    <TodoListFooter changeFilter={this.changeFilter}\r\n                                    filterValue={this.state.filterValue}/>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isPreloaderTasks: state.todoPage.isPreloaderTasks\r\n    }\r\n}\r\n\r\n\r\nconst TodolistConnect = connect<MapStateToPropsType, MapDispatchToPropsType,{}, AppStateType>(mapStateToProps,\r\n    {deleteTodolist,changeTodolist,\r\n        getTasks,addTask, deleteTask,changeTask}\r\n        )(TodoList)\r\n\r\nexport default TodolistConnect;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport TodoList from \"./TodoList/TodoList\";\r\nimport AddNewItemForm from \"./TodoList/AddNewItemForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTodoList, getTodolists} from \"../BLL/TodoListReducer\";\r\nimport {AppStateType} from \"../BLL/store\";\r\nimport Preloader from './common/Preloader';\r\nimport {TodoType} from \"../types/entities\";\r\nimport {url} from \"inspector\";\r\n\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    getTodolists: () => void\r\n    addTodoList: (title: string) => void\r\n\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    todolists: Array<TodoType>\r\n    isPreloaderTodo: boolean\r\n    isAuth:boolean\r\n}\r\n\r\n\r\nclass App extends React.Component<MapDispatchToPropsType & MapStateToPropsType> {\r\n\r\n    componentDidMount = () => {\r\n        this.restoreState()\r\n    }\r\n\r\n\r\n    restoreState = () => {\r\n// вызов колбека который нам предоставил connect для вызова санки\r\n        this.props.getTodolists()\r\n    }\r\n\r\n\r\n    addTodoList = (newTodolistName: string) => {\r\n        // вызов колбека который нам предоставил connect для вызова санки\r\n        this.props.addTodoList(newTodolistName)\r\n\r\n    }\r\n\r\n\r\n    render = () => {\r\n        // debugger;\r\n        let todolists = this.props.todolists.map(tl => {\r\n            return <TodoList key={tl.id} id={tl.id} title={tl.title} tasks={tl.tasks}/>\r\n        })\r\n        return (\r\n            <div\r\n            //     style={{\r\n            //     // backgroundColor: \"rgba(28,41,41,0.87)\",\r\n            //     backgroundImage: \"url(https://ismile-service.ru/images/bg20.jpg)\",\r\n            //     minHeight:\"80vh\"\r\n            // }}\r\n            >\r\n                <Preloader isPreloader={this.props.isPreloaderTodo}/>\r\n                <div>\r\n                    <AddNewItemForm addItem={this.addTodoList}/>\r\n                </div>\r\n                <div className=\"App\">\r\n                    {todolists}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        todolists: state.todoPage.todolists,\r\n        isPreloaderTodo: state.todoPage.isPreloaderTodo,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nconst ConnectedApp = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addTodoList,\r\n    getTodolists\r\n\r\n})(App);\r\n\r\nexport default ConnectedApp;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../BLL/store\";\r\nimport {HeaderBlock} from './header/HeaderBlock';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport {Login} from \"./auth/Login\";\r\nimport {API} from \"../DAL/api\";\r\nimport {Autorization} from \"../BLL/AuthReducer\";\r\nimport App from \"./App\";\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    Autorization: () => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nclass Initial extends React.Component<MapDispatchToPropsType & MapStateToPropsType> {\r\n\r\n    componentDidMount = () => {\r\n        this.props.Autorization()\r\n    }\r\n\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div style={{backgroundImage: \"url(https://ismile-service.ru/images/bg20.jpg)\"}}>\r\n                <HeaderBlock/>\r\n                <div style={{minHeight: \"80vh\"}}>\r\n                    <Route path={'/login'} component={Login}/>\r\n\r\n                    <Route path={'/'}\r\n                           render={() => {\r\n                               // debugger\r\n                               if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n                               return (\r\n                                   <App/>\r\n                               )\r\n                           }}/>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nconst ConnectedInitial = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n    Autorization\r\n\r\n})(Initial);\r\n\r\nexport default ConnectedInitial;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./BLL/store\";\nimport {HashRouter} from \"react-router-dom\";\nimport Initial from \"./UI/Initial\";\n\nReactDOM.render(<Provider store={store}>\n\n    <HashRouter>\n        <Initial/>\n    </HashRouter>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}